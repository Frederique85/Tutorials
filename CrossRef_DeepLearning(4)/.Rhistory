length(unique(DL_funder$funder_type1))
df <- data.frame(matrix(ncol = 3, nrow = 0))
colnames(df) <- c('from', 'to', 'value')
# 3.1 Create an edgelist
for (doi_t in unique(DL_funder_records$doi)) {
# Create a temporary dataset for each record (e.g. record)
df_temp <- DL_funder_records %>%
filter(doi == doi_t)
# only create the edgelist if there is more than two funders per record
if (nrow(df_temp) == 2 ){
dois_funder <- sort(df_temp$funder_doi)
dois_funder <- c( dois_funder , 1)
df <- rbind(df, dois_funder)
colnames(df) <- c('from', 'to', 'value')
} else if (nrow(df_temp) > 2 ){
# If there is more than two funders per papers, we are iterating over all funders
dois_funder <- sort(df_temp$funder_doi)
for (i in 1:(nrow(df_temp)-1)){
for(j in (i+1):nrow(df_temp)){
dois_temp <- c(dois_funder[i], dois_funder[j], 1)
df <- rbind(df, dois_temp)
colnames(df) <- c('from', 'to', 'value')
}
}
}
}
View(df)
View(df)
df <- data.frame(matrix(ncol = 3, nrow = 0))
colnames(df) <- c('from', 'to', 'value')
View(DL_funder_records)
# 3.1 Create an edgelist
for (doi_t in unique(DL_funder_records$doi)) {
# Create a temporary dataset for each record (e.g. record)
df_temp <- DL_funder_records %>%
filter(doi == doi_t)
# only create the edgelist if there is more than two funders per record
if (nrow(df_temp) == 2 ){
dois_funder <- sort(df_temp$funder_doi)
dois_funder <- c( dois_funder , 1)
df <- rbind(df, dois_funder)
colnames(df) <- c('from', 'to', 'value')
} else if (nrow(df_temp) > 2 ){
# If there is more than two funders per papers, we are iterating over all funders
dois_funder <- sort(df_temp$funder_doi)
for (i in 1:(nrow(df_temp)-1)){
for(j in (i+1):nrow(df_temp)){
dois_temp <- c(dois_funder[i], dois_funder[j], 1)
df <- rbind(df, dois_temp)
colnames(df) <- c('from', 'to', 'value')
}
}
}
}
View(df)
View(DL_funder_records)
View(df)
View(df_temp)
nrow(df_temp) == 2
dois_funder <- sort(df_temp$funder_doi)
dois_funder
dois_funder <- c( dois_funder , 1)
dois_funder
df <- data.frame(matrix(ncol = 3, nrow = 0))
colnames(df) <- c('from', 'to', 'value')
df <- rbind(df, dois_funder)
colnames(df) <- c('from', 'to', 'value')
View(df)
unique(DL_funder_records$doi)
df <- data.frame(matrix(ncol = 3, nrow = 0))
colnames(df) <- c('from', 'to', 'value')
# 3.1 Create an edgelist
for (doi_t in unique(DL_funder_records$doi)) {
# Create a temporary dataset for each record (e.g. record)
df_temp <- DL_funder_records %>%
filter(doi == doi_t)
# only create the edgelist if there is more than two funders per record
if (nrow(df_temp) == 2 ){
dois_funder <- sort(df_temp$funder_doi)
dois_funder <- c( dois_funder , 1)
df <- rbind(df, dois_funder)
colnames(df) <- c('from', 'to', 'value')
} else if (nrow(df_temp) > 2 ){
# If there is more than two funders per papers, we are iterating over all funders
dois_funder <- sort(df_temp$funder_doi)
for (i in 1:(nrow(df_temp)-1)){
for(j in (i+1):nrow(df_temp)){
dois_temp <- c(dois_funder[i], dois_funder[j], 1)
df <- rbind(df, dois_temp)
colnames(df) <- c('from', 'to', 'value')
}
}
}
}
df_net <- df %>%
group_by(from, to) %>%
summarise(value=n()) %>%
ungroup()
# 3.1 Create an edgelist
for (doi_t in unique(DL_funder_records$doi)) {
# Create a temporary dataset for each record (e.g. record)
df_temp <- DL_funder_records %>%
filter(doi == doi_t)
# only create the edgelist if there is more than two funders per record
if (nrow(df_temp) == 2 ){
dois_funder <- sort(df_temp$funder_doi)
dois_funder <- c( dois_funder , 1)
df <- rbind(df, dois_funder)
colnames(df) <- c('from', 'to', 'value')
} else if (nrow(df_temp) > 2 ){
# If there is more than two funders per papers, we are iterating over all funders
dois_funder <- sort(df_temp$funder_doi)
for (i in 1:(nrow(df_temp)-1)){
for(j in (i+1):nrow(df_temp)){
dois_temp <- c(dois_funder[i], dois_funder[j], 1)
df <- rbind(df, dois_temp)
colnames(df) <- c('from', 'to', 'value')
}
}
}
}
View(df)
View(df)
dois_funder <- sort(df_temp$funder_doi)
dois_funder <- c( dois_funder , 1)
colnames(dois_funder) <- c('from', 'to', 'value')
dois_funder <- data.frame(c( dois_funder , 1))
View(dois_funder)
dois_funder <- sort(df_temp$funder_doi)
dois_funder <- data.frame(t(c( dois_funder , 1)))
colnames(dois_funder) <- c('from', 'to', 'value')
df <- rbind(df, dois_funder)
View(df)
df <- data.frame(matrix(ncol = 3, nrow = 0))
colnames(df) <- c('from', 'to', 'value')
# 3.1 Create an edgelist
for (doi_t in unique(DL_funder_records$doi)) {
# Create a temporary dataset for each record (e.g. record)
df_temp <- DL_funder_records %>%
filter(doi == doi_t)
# only create the edgelist if there is more than two funders per record
if (nrow(df_temp) == 2 ){
dois_funder <- sort(df_temp$funder_doi)
dois_funder <- data.frame(t(c( dois_funder , 1)))
colnames(dois_funder) <- c('from', 'to', 'value')
df <- rbind(df, dois_funder)
} else if (nrow(df_temp) > 2 ){
# If there is more than two funders per papers, we are iterating over all funders
dois_funder <- sort(df_temp$funder_doi)
for (i in 1:(nrow(df_temp)-1)){
for(j in (i+1):nrow(df_temp)){
dois_temp <- data.frame(t(c(dois_funder[i], dois_funder[j], 1)))
colnames(dois_temp) <- c('from', 'to', 'value')
df <- rbind(df, dois_temp)
}
}
}
}
View(df)
df_net <- df %>%
group_by(from, to) %>%
summarise(value=n()) %>%
ungroup()
country_net <- left_join(df_net, funder_country, by = c("from"= 'funder_doi')) %>%
select( -from, -funder_name) %>%
rename(from = funder_country)
country_net <- left_join(country_net, funder_country, by = c("to"= 'funder_doi')) %>%
select( -to, -funder_name) %>%
rename(to = funder_country)
country_net <- country_net %>%
group_by(from, to) %>%
summarise(value=sum(value)) %>%
ungroup()
country_net <- country_net %>%
rowwise() %>%
mutate(small = min(as.character(from), as.character(to))) %>%
mutate(big = max(as.character(from), as.character(to))) %>%
group_by (small, big) %>%
summarise(value=sum(value)) %>%
ungroup() %>%
rename(from = small, to=big)
country_net2 <- country_net %>%
filter(from != to)
matrix_net <- adjacencyList2Matrix(country_net2, square = TRUE)
chordDiagram(country_net2)
# 2.1 Explore which variable is most suited
length(unique(DL_funder$funder_country))
length(unique(DL_funder$funder_region))
length(unique(DL_funder$funder_type1))
length(unique(DL_funder$funder_type2))
View(DL_funder_records)
View(DL_funder_records)
?arrange
# 3.2 Merge the weights of the daframe
df_net <- df %>%
group_by(from, to) %>%
summarise(value=n()) %>%
ungroup() %>%
arrange(desc(value))
View(df_net)
# 4.1 Extract the funder and country levels into a dataset
funder_country <- DL_funder %>%
select(funder_doi, funder_country)
# 4.2 Make a new adjacency list with countries instead of funders
country_net <- left_join(df_net, funder_country, by = c("from"= 'funder_doi')) %>%
select( -from) %>%
rename(from = funder_country)
country_net <- left_join(country_net, funder_country, by = c("to"= 'funder_doi')) %>%
select( -to) %>%
rename(to = funder_country)
# 4.3 Merge countries and values
country_net <- country_net %>%
rowwise() %>%
mutate(small = min(as.character(from), as.character(to))) %>%
mutate(big = max(as.character(from), as.character(to))) %>%
group_by (small, big) %>%
summarise(value=sum(value)) %>%
ungroup() %>%
rename(from = small, to=big)
# 5.  Build the Chord Diagram
#-----------------------------
# 5.1 Build chord diagram
chordDiagram(country_net)
?chordDiagram
# 5.2 Remove link to self
circos.clear()
# 5.1 Build chord diagram
chordDiagram(country_net, annotationTrack = c("name", "grid"))
# 5.2 Remove link to self
circos.clear()
# 5.1 Build chord diagram
chordDiagram(country_net, annotationTrack = c("name", "grid"), annotationTrackHeight = mm_h(c(6, 2)))
# 5.2 Remove link to self
circos.clear()
# 5.1 Build chord diagram
chordDiagram(country_net, annotationTrack = c("name", "grid"), annotationTrackHeight = mm_h(c(6, 20)))
# 5.2 Remove link to self
circos.clear()
# 5.1 Build chord diagram
chordDiagram(country_net, annotationTrack = c("name", "grid"), annotationTrackHeight = mm_h(c(6, 2)))
# 5.2 Remove link to self
circos.clear()
# 5.1 Build chord diagram
chordDiagram(country_net, annotationTrack = c("name", "grid"), annotationTrackHeight = mm_h(c(2, 2)))
# 5.1 Build chord diagram
chordDiagram(country_net, annotationTrack = c("name"), annotationTrackHeight = mm_h(c(2, 2)))
# 5.1 Build chord diagram
chordDiagram(country_net, annotationTrack = c("name", "grid"), annotationTrackHeight = mm_h(c(2, 2)))
circos.track(track.index = 1, panel.fun = function(x, y) {
circos.text(CELL_META$xcenter, CELL_META$ylim[1], CELL_META$sector.index,
facing = "clockwise", niceFacing = TRUE, adj = c(0, 0.5))
}, bg.border = NA)
# 5.2 Remove link to self
circos.clear()
chordDiagram(country_net, annotationTrack = c("grid", "axis"))
circos.track(track.index = 1, panel.fun = function(x, y) {
circos.text(CELL_META$xcenter, CELL_META$ylim[1], CELL_META$sector.index,
facing = "clockwise", niceFacing = TRUE, adj = c(0, 0.5))
}, bg.border = NA)
# 5.2 Remove link to self
circos.clear()
# 5.1 Build chord diagram
chordDiagram(country_net, annotationTrack = c("grid"))
circos.track(track.index = 1, panel.fun = function(x, y) {
circos.text(CELL_META$xcenter, CELL_META$ylim[1], CELL_META$sector.index,
facing = "clockwise", niceFacing = TRUE, adj = c(0, 0.5))
}, bg.border = NA)
# 5.1 Build chord diagram
chordDiagram(country_net, annotationTrack = c("grid"))
circos.track(track.index = 1, panel.fun = function(x, y) {
circos.text(CELL_META$xcenter, CELL_META$ylim[1], CELL_META$sector.index,
facing = "clockwise", niceFacing = TRUE, adj = c(0, 0.5))
}, bg.border = NA)
# 5.2 Remove link to self
circos.clear()
# 5.1 Build chord diagram
chordDiagram(country_net, annotationTrack = c("grid"))
circos.track(track.index = 1, panel.fun = function(x, y) {
circos.text(CELL_META$xcenter, CELL_META$ylim[1], CELL_META$sector.index,
facing = "clockwise", niceFacing = TRUE, adj = c(0, 2))
}, bg.border = NA)
# 5.2 Remove link to self
circos.clear()
chordDiagram(country_net, grid.col = grid.col, annotationTrack = c("grid"))
circos.track(track.index = 1, panel.fun = function(x, y) {
circos.text(CELL_META$xcenter, CELL_META$ylim[1], CELL_META$sector.index,
facing = "clockwise", niceFacing = TRUE, adj = c(0, 0.5))
}, bg.border = NA)
# 5.1 Build chord diagram
chordDiagram(country_net, grid.col = grid.col, annotationTrack = c("grid"))
# 5.1 Build chord diagram
chordDiagram(country_net,  annotationTrack = c("grid"))
circos.track(track.index = 1, panel.fun = function(x, y) {
circos.text(CELL_META$xcenter, CELL_META$ylim[1], CELL_META$sector.index,
facing = "clockwise", niceFacing = TRUE, adj = c(0, 0.5))
}, bg.border = NA)
circos.track(track.index = 1, panel.fun = function(x, y) {
circos.text(CELL_META$xcenter, CELL_META$ylim[2], CELL_META$sector.index,
facing = "clockwise", niceFacing = TRUE, adj = c(0, 0.5))
}, bg.border = NA)
# 5.2 Remove link to self
circos.clear()
# 5.1 Build chord diagram
chordDiagram(country_net,  annotationTrack = c("grid"))
circos.track(track.index = 1, panel.fun = function(x, y) {
circos.text(CELL_META$xcenter, CELL_META$ylim[2], CELL_META$sector.index,
facing = "clockwise", niceFacing = TRUE, adj = c(0, 0.5))
}, bg.border = NA)
# 5.2 Remove link to self
circos.clear()
chordDiagram(country_net,  annotationTrack = c("grid"))
circos.track(track.index = 1, panel.fun = function(x, y) {
circos.text(CELL_META$xcenter, CELL_META$ylim[4], CELL_META$sector.index,
facing = "clockwise", niceFacing = TRUE, adj = c(0, 0.5))
}, bg.border = NA)
# 5.2 Remove link to self
circos.clear()
# 5.2 Remove link to self
circos.clear()
# 5.1 Build chord diagram
chordDiagram(country_net,  annotationTrack = c("grid"))
circos.track(track.index = 1, panel.fun = function(x, y) {
circos.text(CELL_META$xcenter, CELL_META$ylim[2.5], CELL_META$sector.index,
facing = "clockwise", niceFacing = TRUE, adj = c(0, 0.5))
}, bg.border = NA)
# 5.2 Remove link to self
circos.clear()
chordDiagram(country_net,  annotationTrack = c("grid"))
circos.track(track.index = 1, panel.fun = function(x, y) {
circos.text(CELL_META$xcenter, CELL_META$ylim[3], CELL_META$sector.index,
facing = "clockwise", niceFacing = TRUE, adj = c(0, 0.5))
}, bg.border = NA)
# 5.2 Remove link to self
circos.clear()
chordDiagram(country_net,  annotationTrack = c("grid"), annotationTrackHeight = c(0.03, 0.01))
circos.track(track.index = 1, panel.fun = function(x, y) {
circos.text(CELL_META$xcenter, CELL_META$ylim[2.8], CELL_META$sector.index,
facing = "clockwise", niceFacing = TRUE, adj = c(0, 0.5))
}, bg.border = NA)
chordDiagram(country_net,  annotationTrack = c("grid"), annotationTrackHeight = c(0.03, 0.01))
circos.track(track.index = 1, panel.fun = function(x, y) {
circos.text(CELL_META$xcenter, CELL_META$ylim[2.8], CELL_META$sector.index,
facing = "clockwise", niceFacing = TRUE, adj = c(0, 0.5))
}, bg.border = NA)
# 5.2 Remove link to self
circos.clear()
# 5.2 Remove link to self
circos.clear()
# 5.1 Build chord diagram
chordDiagram(country_net)
# 5.2 Remove link to self
circos.clear()
country_net2 <- country_net %>%
filter(from != to)
chordDiagram(country_net2,  annotationTrack = c("grid"), annotationTrackHeight = c(0.03, 0.01))
circos.track(track.index = 1, panel.fun = function(x, y) {
circos.text(CELL_META$xcenter, CELL_META$ylim[2.8], CELL_META$sector.index,
facing = "clockwise", niceFacing = TRUE, adj = c(0, 0.5))
}, bg.border = NA)
# 5.2 Remove link to self
circos.clear()
country_net2 <- country_net %>%
filter(from != to)
chordDiagram(country_net2,  annotationTrack = c("grid"), annotationTrackHeight = c(0.03, 0.01))
circos.track(track.index = 1, panel.fun = function(x, y) {
circos.text(CELL_META$xcenter, CELL_META$ylim[2.8], CELL_META$sector.index,
facing = "clockwise", niceFacing = TRUE, adj = c(0, 0.5))
}, bg.border = NA)
circos.clear()
country_net2 <- country_net %>%
filter(from != to)
chordDiagram(country_net2,  annotationTrack = c("grid"), annotationTrackHeight = c(0.03, 0.03))
circos.track(track.index = 1, panel.fun = function(x, y) {
circos.text(CELL_META$xcenter, CELL_META$ylim[2.8], CELL_META$sector.index,
facing = "clockwise", niceFacing = TRUE, adj = c(0, 0.5))
}, bg.border = NA)
View(country_net2)
View(DL_funder)
View(DL_funder_records)
View(funder_paper_n)
View(funder_country)
View(funder_paper_n)
View(dois_temp)
View(dois_funder)
View(df_net)
View(country_net2)
country_net_noself <- country_net %>%
filter(from != to)
from <- country_net_noself %>%
select(from, value) %>%
rename(country = from )
to <- country_net_noself %>%
select(from, value) %>%
rename(country = to )
from <- country_net_noself %>%
select(from, value) %>%
rename(country = from )
to <- country_net_noself %>%
select(to, value) %>%
rename(country = to )
country_summary <- bind_rows(from, to) %>%
group_by(country)%>%
summarise(value=sum(value))%>%
arrange(value)
View(country_summary)
country_final <- country_net_noself %>%
filter(!(to %in% country_remove$country))%>%
filter(!(from %in% country_remove$country))
country_remove <- country_summary %>%
filter(value <10)%>%
select(country)
country_final <- country_net_noself %>%
filter(!(to %in% country_remove$country))%>%
filter(!(from %in% country_remove$country))
circos.clear()
chordDiagram(country_final,  annotationTrack = c("grid"), annotationTrackHeight = c(0.03, 0.03))
circos.track(track.index = 1, panel.fun = function(x, y) {
circos.text(CELL_META$xcenter, CELL_META$ylim[2.8], CELL_META$sector.index,
facing = "clockwise", niceFacing = TRUE, adj = c(0, 0.5))
}, bg.border = NA)
circos.clear()
chordDiagram(country_final,  annotationTrack = c("grid"), annotationTrackHeight = c(0.03, 0.03))
circos.track(track.index = 1, panel.fun = function(x, y) {
circos.text(CELL_META$xcenter, CELL_META$ylim[2.8], CELL_META$sector.index,
facing = "clockwise", niceFacing = TRUE, adj = c(0, 0.5))
}, bg.border = NA)
circos.clear()
chordDiagram(country_final,  annotationTrack = c("grid"), annotationTrackHeight = c(0.03, 0.2))
circos.track(track.index = 1, panel.fun = function(x, y) {
circos.text(CELL_META$xcenter, CELL_META$ylim[2.8], CELL_META$sector.index,
facing = "clockwise", niceFacing = TRUE, adj = c(0, 0.5))
}, bg.border = NA)
chordDiagram(country_final,  annotationTrack = c("grid"), annotationTrackHeight = c(0.03, 2))
circos.track(track.index = 1, panel.fun = function(x, y) {
circos.text(CELL_META$xcenter, CELL_META$ylim[2.8], CELL_META$sector.index,
facing = "clockwise", niceFacing = TRUE, adj = c(0, 0.5))
}, bg.border = NA)
circos.clear()
chordDiagram(country_final,  annotationTrack = c("grid"), annotationTrackHeight = c(3, 2))
circos.track(track.index = 1, panel.fun = function(x, y) {
circos.text(CELL_META$xcenter, CELL_META$ylim[2.8], CELL_META$sector.index,
facing = "clockwise", niceFacing = TRUE, adj = c(0, 0.5))
}, bg.border = NA)
circos.clear()
chordDiagram(country_final,  annotationTrack = c("grid"), annotationTrackHeight = c(0.03, 0.2))
circos.track(track.index = 1, panel.fun = function(x, y) {
circos.text(CELL_META$xcenter, CELL_META$ylim[2.8], CELL_META$sector.index,
facing = "clockwise", niceFacing = TRUE, adj = c(0, 0.5))
}, bg.border = NA)
circos.clear()
chordDiagram(country_final,  annotationTrack = c("grid"), annotationTrackHeight = c(0.03, 0.2))
circos.track(track.index = 1, panel.fun = function(x, y) {
circos.text(CELL_META$xcenter, CELL_META$ylim[2.8], CELL_META$sector.index,
facing = "clockwise", niceFacing = TRUE, adj = c(0, 0.5))
}, bg.border = NA)
circos.clear()
chordDiagram(country_final,  annotationTrack = c("grid"), annotationTrackHeight = c(0.03, 0.2))
circos.track(track.index = 1, panel.fun = function(x, y) {
circos.text(CELL_META$xcenter, CELL_META$ylim[2.8], CELL_META$sector.index,
facing = "clockwise", niceFacing = TRUE, adj = c(0, 0.5))
}, bg.border = NA)
circos.clear()
chordDiagram(country_final,  annotationTrack = c("grid"), annotationTrackHeight = c(0.03, 0.2))
circos.track(track.index = 1, panel.fun = function(x, y) {
circos.text(CELL_META$xcenter, CELL_META$ylim[2.8], CELL_META$sector.index,
facing = "clockwise", niceFacing = TRUE, adj = c(0, 0.5))
}, bg.border = NA)
circos.clear()
chordDiagram(country_final,  annotationTrack = c("grid"), annotationTrackHeight = c(0.03, 0.2))
circos.track(track.index = 1, panel.fun = function(x, y) {
circos.text(CELL_META$xcenter, CELL_META$ylim[2.8], CELL_META$sector.index,
facing = "clockwise", niceFacing = TRUE, adj = c(0, 0.5))
}, bg.border = NA)
circos.clear()
chordDiagram(country_final,  annotationTrack = c("grid"), annotationTrackHeight = c(0.03, 0.2))
circos.track(track.index = 1, panel.fun = function(x, y) {
circos.text(CELL_META$xcenter, CELL_META$ylim[2.8], CELL_META$sector.index,
facing = "clockwise", niceFacing = TRUE, adj = c(0, 0.5))
}, bg.border = NA)
circos.clear()
chordDiagram(country_final,  annotationTrack = c("grid"), annotationTrackHeight = c(0.03, 0.2))
circos.track(track.index = 1, panel.fun = function(x, y) {
circos.text(CELL_META$xcenter, CELL_META$ylim[2.8], CELL_META$sector.index,
facing = "clockwise", niceFacing = TRUE, adj = c(0, 0.5))
}, bg.border = NA)
circos.clear()
country_net_noself <- country_net %>%
filter(from != to)
chordDiagram(country_net_noself,  annotationTrack = c("grid"))
circos.track(track.index = 1, panel.fun = function(x, y) {
circos.text(CELL_META$xcenter, CELL_META$ylim[2.8], CELL_META$sector.index,
facing = "clockwise", niceFacing = TRUE, adj = c(0, 0.5))
}, bg.border = NA)
circos.clear()
country_net_noself <- country_net %>%
filter(from != to)
chordDiagram(country_net_noself,  annotationTrack = c("grid"))
circos.track(track.index = 1, panel.fun = function(x, y) {
circos.text(CELL_META$xcenter, CELL_META$ylim[2.8], CELL_META$sector.index,
facing = "clockwise", niceFacing = TRUE, adj = c(0, 0.5))
}, bg.border = NA)
circos.clear()
chordDiagram(country_net_noself,  annotationTrack = c("grid", "axis"))
circos.track(track.index = 1, panel.fun = function(x, y) {
circos.text(CELL_META$xcenter, CELL_META$ylim[2.8], CELL_META$sector.index,
facing = "clockwise", niceFacing = TRUE, adj = c(0, 0.5))
}, bg.border = NA)
View(country_summary)
write_csv(df_net, "df_net.csv")
write_csv(country_net, "country_net.csv")
write_csv(country_net_noself, "country_net_noself.csv")
write_csv(country_final, "country_final.csv")
